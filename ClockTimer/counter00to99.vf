////////////////////////////////////////////////////////////////////////////////
// Copyright (c) 1995-2013 Xilinx, Inc.  All rights reserved.
////////////////////////////////////////////////////////////////////////////////
//   ____  ____ 
//  /   /\/   / 
// /___/  \  /    Vendor: Xilinx 
// \   \   \/     Version : 14.7
//  \   \         Application : sch2hdl
//  /   /         Filename : counter00to99.vf
// /___/   /\     Timestamp : 10/27/2020 23:03:45
// \   \  /  \ 
//  \___\/\___\ 
//
//Command: sch2hdl -intstyle ise -family spartan6 -verilog E:/digit_program/project/ClockTimer/counter00to99.vf -w E:/digit_program/project/ClockTimer/counter00to99.sch
//Design Name: counter00to99
//Device: spartan6
//Purpose:
//    This verilog netlist is translated from an ECS schematic.It can be 
//    synthesized and simulated, but it should not be modified. 
//
`timescale 100 ps / 10 ps

module CD4CE_HXILINX_counter00to99(CEO, Q0, Q1, Q2, Q3, TC, C, CE, CLR);
   
   parameter TERMINAL_COUNT = 4'b1001;
   
   output             CEO;
   output             Q0;
   output             Q1;
   output             Q2;
   output             Q3;
   output             TC;

   input 	      C;	
   input 	      CE;	
   input 	      CLR;	
   
   reg                Q0;
   reg                Q1;
   reg                Q2;
   reg                Q3;
   
   always @(posedge C or posedge CLR)
     begin
	if (CLR)
	  {Q3, Q2, Q1, Q0} <= 4'b0000;

	else if (CE)
          begin
             if ({Q3,Q2,Q1,Q0} == 4'b1001)
               {Q3,Q2,Q1,Q0} <= 4'b0000;
             else if({Q3,Q2,Q1,Q0} == 4'b1011)
               {Q3,Q2,Q1,Q0} <= 4'b0110;
             else if({Q3,Q2,Q1,Q0} == 4'b1101)
               {Q3,Q2,Q1,Q0} <= 4'b0100;
             else if({Q3,Q2,Q1,Q0} == 4'b1111)
               {Q3,Q2,Q1,Q0} <= 4'b0010;
            
             else
	      {Q3, Q2, Q1,Q0} <= {Q3, Q2, Q1,Q0} + 1;
          end
     end
   
   assign CEO = TC & CE;
   assign TC = CLR ? 1'b0 : ({Q3, Q2, Q1, Q0} == TERMINAL_COUNT);
   
endmodule
`timescale 1ns / 1ps

module counter00to99(Clock, 
                     reset_button, 
                     data);

    input Clock;
    input reset_button;
   output [15:8] data;
   
   wire XLXN_2;
   wire XLXN_3;
   wire XLXN_6;
   wire XLXN_7;
   
   (* HU_SET = "XLXI_1_0" *) 
   CD4CE_HXILINX_counter00to99  XLXI_1 (.C(Clock), 
                                       .CE(XLXN_6), 
                                       .CLR(reset_button), 
                                       .CEO(), 
                                       .Q0(data[8]), 
                                       .Q1(data[9]), 
                                       .Q2(data[10]), 
                                       .Q3(data[11]), 
                                       .TC(XLXN_2));
   (* HU_SET = "XLXI_2_1" *) 
   CD4CE_HXILINX_counter00to99  XLXI_2 (.C(XLXN_3), 
                                       .CE(XLXN_7), 
                                       .CLR(reset_button), 
                                       .CEO(), 
                                       .Q0(data[12]), 
                                       .Q1(data[13]), 
                                       .Q2(data[14]), 
                                       .Q3(data[15]), 
                                       .TC());
   INV  XLXI_3 (.I(XLXN_2), 
               .O(XLXN_3));
   VCC  XLXI_6 (.P(XLXN_6));
   VCC  XLXI_7 (.P(XLXN_7));
endmodule
